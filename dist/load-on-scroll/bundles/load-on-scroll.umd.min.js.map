{"version":3,"sources":["ng://load-on-scroll/lib/load-on-scoll.directive.ts","ng://load-on-scroll/lib/load-on-scroll.module.ts"],"names":["LoadOnScollDirective","el","renderer","this","first","rotateOnLoad","disableOnLoad","bottomPixelBorder","loadTrigger","EventEmitter","prototype","ngAfterViewInit","setOnLoad","emitCurrentValues","ngOnChanges","_this","scrollSubscription","unsubscribe","fromEvent","window","pipe","debounceTime","subscribe","e","scrollY","innerHeight","document","body","scrollHeight","onClick","loadDoneSubject","itemsPerPage","emit","limit","load","disable","rotate","on","componentToRotate","rotateOnLoadChildSelector","nativeElement","querySelector","addClass","removeClass","setProperty","Directive","args","selector","ElementRef","Renderer2","Input","Output","HostListener","LoadOnScrollModule","NgModule","declarations","imports","exports"],"mappings":"wWAAA,IAAAA,EAAA,WAkCE,SAAAA,EAAoBC,EAAwBC,GAAxBC,KAAAF,GAAAA,EAAwBE,KAAAD,SAAAA,EAzB5CC,KAAAC,MAAgB,EAYhBD,KAAAE,cAAe,EAGfF,KAAAG,eAAgB,EAGhBH,KAAAI,kBAAoB,GAGpBJ,KAAAK,YAAc,IAAIC,EAAAA,aA4DpB,OAtDET,EAAAU,UAAAC,gBAAA,WACER,KAAKS,WAAU,GACfT,KAAKU,qBAGPb,EAAAU,UAAAI,YAAA,WAAA,IAAAC,EAAAZ,KACMA,KAAKa,oBAAoBb,KAAKa,mBAAmBC,cAErDd,KAAKa,mBAAqBE,EAAAA,UAAUC,OAAQ,UACzCC,KAAKC,EAAAA,aAAa,MAClBC,UAAS,SAACC,GACLJ,OAAOK,QAAUL,OAAOM,YAAcV,EAAKR,mBAAqBmB,SAASC,KAAKC,cAChFb,EAAKc,YAIP1B,KAAK2B,iBACP3B,KAAK2B,gBAAgBR,UAAS,SAACC,GAC7BR,EAAKH,WAAU,MAMrBZ,EAAAU,UAAAmB,QADA,WAEE1B,KAAKS,WAAU,GACfT,KAAKC,OAASD,KAAK4B,aACnB5B,KAAKU,qBAGCb,EAAAU,UAAAG,kBAAR,WACEV,KAAKK,YAAYwB,KAAK,CACpBC,MAAO9B,KAAK4B,aACZ3B,MAAOD,KAAKC,SAIRJ,EAAAU,UAAAE,UAAR,SAAkBsB,GACZ/B,KAAKG,eAAeH,KAAKgC,QAAQD,GACjC/B,KAAKE,cAAcF,KAAKiC,OAAOF,IAG7BlC,EAAAU,UAAA0B,OAAR,SAAeC,OACPC,EAAoBnC,KAAKoC,0BAC3BpC,KAAKF,GAAGuC,cAAcC,cAActC,KAAKoC,2BACzCpC,KAAKF,GAAGuC,cAERH,EAAIlC,KAAKD,SAASwC,SAASJ,EAAmB,cAC7CnC,KAAKD,SAASyC,YAAYL,EAAmB,eAG5CtC,EAAAU,UAAAyB,QAAR,SAAgBE,GACdlC,KAAKD,SAAS0C,YAAYzC,KAAKF,GAAGuC,cAAe,WAAYH,wBApFhEQ,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,+DALqCC,EAAAA,kBAAYC,EAAAA,4CAQ1DC,EAAAA,4BAGAA,EAAAA,+BAGAA,EAAAA,yCAGAA,EAAAA,4BAGAA,EAAAA,6BAGAA,EAAAA,iCAGAA,EAAAA,2BAGAC,EAAAA,wBA8BAC,EAAAA,aAAYN,KAAA,CAAC,YA+BhB9C,EA1FA,GCAAqD,EAAA,WAGA,SAAAA,KAKiC,2BALhCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAACvD,GACfwD,QAAS,GACTC,QAAS,CAACzD,OAEqBqD,EARjC","sourcesContent":["import { Directive, Input, Output, EventEmitter, ElementRef, Renderer2, HostListener } from '@angular/core';\nimport { Subject, Subscription, fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Directive({\n  selector: '[dmLoadOnScoll]'\n})\nexport class LoadOnScollDirective {\n  @Input()\n  first: number = 0;\n\n  @Input()\n  itemsPerPage: number;\n\n  @Input()\n  loadDoneSubject: Subject<any>;\n\n  @Input()\n  rotateOnLoadChildSelector: string;\n\n  @Input()\n  rotateOnLoad = false;\n\n  @Input()\n  disableOnLoad = false;\n\n  @Input()\n  bottomPixelBorder = 25;\n\n  @Output()\n  loadTrigger = new EventEmitter<any>();\n\n  private scrollSubscription: Subscription;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterViewInit() {\n    this.setOnLoad(true);\n    this.emitCurrentValues();\n  }\n\n  ngOnChanges() {\n    if (this.scrollSubscription) this.scrollSubscription.unsubscribe();\n\n    this.scrollSubscription = fromEvent(window, 'scroll')\n      .pipe(debounceTime(200))\n      .subscribe(e => {\n        if (window.scrollY + window.innerHeight + this.bottomPixelBorder >= document.body.scrollHeight) {\n          this.onClick();\n        }\n      });\n\n    if (this.loadDoneSubject) {\n      this.loadDoneSubject.subscribe(e => {\n        this.setOnLoad(false);\n      });\n    }\n  }\n\n  @HostListener('click')\n  onClick() {\n    this.setOnLoad(true);\n    this.first += this.itemsPerPage;\n    this.emitCurrentValues();\n  }\n\n  private emitCurrentValues() {\n    this.loadTrigger.emit({\n      limit: this.itemsPerPage,\n      first: this.first\n    });\n  }\n\n  private setOnLoad(load: boolean) {\n    if (this.disableOnLoad) this.disable(load);\n    if (this.rotateOnLoad) this.rotate(load);\n  }\n\n  private rotate(on: boolean) {\n    const componentToRotate = this.rotateOnLoadChildSelector\n      ? this.el.nativeElement.querySelector(this.rotateOnLoadChildSelector)\n      : this.el.nativeElement;\n\n    if (on) this.renderer.addClass(componentToRotate, 'los-rotate');\n    else this.renderer.removeClass(componentToRotate, 'los-rotate');\n  }\n\n  private disable(on: boolean) {\n    this.renderer.setProperty(this.el.nativeElement, 'disabled', on);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { LoadOnScollDirective } from './load-on-scoll.directive';\n\n@NgModule({\n  declarations: [LoadOnScollDirective],\n  imports: [],\n  exports: [LoadOnScollDirective]\n})\nexport class LoadOnScrollModule {}\n"]}